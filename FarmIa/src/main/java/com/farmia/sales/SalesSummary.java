/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.farmia.sales;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class SalesSummary extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4032140910405638738L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SalesSummary\",\"namespace\":\"com.farmia.sales\",\"fields\":[{\"name\":\"category\",\"type\":\"string\"},{\"name\":\"total_quantity\",\"type\":\"int\"},{\"name\":\"total_revenue\",\"type\":\"float\"},{\"name\":\"window_start\",\"type\":\"long\"},{\"name\":\"window_end\",\"type\":\"long\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<SalesSummary> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<SalesSummary> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<SalesSummary> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<SalesSummary> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<SalesSummary> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this SalesSummary to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a SalesSummary from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a SalesSummary instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static SalesSummary fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence category;
  private int total_quantity;
  private float total_revenue;
  private long window_start;
  private long window_end;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SalesSummary() {}

  /**
   * All-args constructor.
   * @param category The new value for category
   * @param total_quantity The new value for total_quantity
   * @param total_revenue The new value for total_revenue
   * @param window_start The new value for window_start
   * @param window_end The new value for window_end
   */
  public SalesSummary(java.lang.CharSequence category, java.lang.Integer total_quantity, java.lang.Float total_revenue, java.lang.Long window_start, java.lang.Long window_end) {
    this.category = category;
    this.total_quantity = total_quantity;
    this.total_revenue = total_revenue;
    this.window_start = window_start;
    this.window_end = window_end;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return category;
    case 1: return total_quantity;
    case 2: return total_revenue;
    case 3: return window_start;
    case 4: return window_end;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: category = (java.lang.CharSequence)value$; break;
    case 1: total_quantity = (java.lang.Integer)value$; break;
    case 2: total_revenue = (java.lang.Float)value$; break;
    case 3: window_start = (java.lang.Long)value$; break;
    case 4: window_end = (java.lang.Long)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'category' field.
   * @return The value of the 'category' field.
   */
  public java.lang.CharSequence getCategory() {
    return category;
  }


  /**
   * Sets the value of the 'category' field.
   * @param value the value to set.
   */
  public void setCategory(java.lang.CharSequence value) {
    this.category = value;
  }

  /**
   * Gets the value of the 'total_quantity' field.
   * @return The value of the 'total_quantity' field.
   */
  public int getTotalQuantity() {
    return total_quantity;
  }


  /**
   * Sets the value of the 'total_quantity' field.
   * @param value the value to set.
   */
  public void setTotalQuantity(int value) {
    this.total_quantity = value;
  }

  /**
   * Gets the value of the 'total_revenue' field.
   * @return The value of the 'total_revenue' field.
   */
  public float getTotalRevenue() {
    return total_revenue;
  }


  /**
   * Sets the value of the 'total_revenue' field.
   * @param value the value to set.
   */
  public void setTotalRevenue(float value) {
    this.total_revenue = value;
  }

  /**
   * Gets the value of the 'window_start' field.
   * @return The value of the 'window_start' field.
   */
  public long getWindowStart() {
    return window_start;
  }


  /**
   * Sets the value of the 'window_start' field.
   * @param value the value to set.
   */
  public void setWindowStart(long value) {
    this.window_start = value;
  }

  /**
   * Gets the value of the 'window_end' field.
   * @return The value of the 'window_end' field.
   */
  public long getWindowEnd() {
    return window_end;
  }


  /**
   * Sets the value of the 'window_end' field.
   * @param value the value to set.
   */
  public void setWindowEnd(long value) {
    this.window_end = value;
  }

  /**
   * Creates a new SalesSummary RecordBuilder.
   * @return A new SalesSummary RecordBuilder
   */
  public static com.farmia.sales.SalesSummary.Builder newBuilder() {
    return new com.farmia.sales.SalesSummary.Builder();
  }

  /**
   * Creates a new SalesSummary RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SalesSummary RecordBuilder
   */
  public static com.farmia.sales.SalesSummary.Builder newBuilder(com.farmia.sales.SalesSummary.Builder other) {
    if (other == null) {
      return new com.farmia.sales.SalesSummary.Builder();
    } else {
      return new com.farmia.sales.SalesSummary.Builder(other);
    }
  }

  /**
   * Creates a new SalesSummary RecordBuilder by copying an existing SalesSummary instance.
   * @param other The existing instance to copy.
   * @return A new SalesSummary RecordBuilder
   */
  public static com.farmia.sales.SalesSummary.Builder newBuilder(com.farmia.sales.SalesSummary other) {
    if (other == null) {
      return new com.farmia.sales.SalesSummary.Builder();
    } else {
      return new com.farmia.sales.SalesSummary.Builder(other);
    }
  }

  /**
   * RecordBuilder for SalesSummary instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SalesSummary>
    implements org.apache.avro.data.RecordBuilder<SalesSummary> {

    private java.lang.CharSequence category;
    private int total_quantity;
    private float total_revenue;
    private long window_start;
    private long window_end;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.farmia.sales.SalesSummary.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.category)) {
        this.category = data().deepCopy(fields()[0].schema(), other.category);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.total_quantity)) {
        this.total_quantity = data().deepCopy(fields()[1].schema(), other.total_quantity);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.total_revenue)) {
        this.total_revenue = data().deepCopy(fields()[2].schema(), other.total_revenue);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.window_start)) {
        this.window_start = data().deepCopy(fields()[3].schema(), other.window_start);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.window_end)) {
        this.window_end = data().deepCopy(fields()[4].schema(), other.window_end);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
    }

    /**
     * Creates a Builder by copying an existing SalesSummary instance
     * @param other The existing instance to copy.
     */
    private Builder(com.farmia.sales.SalesSummary other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.category)) {
        this.category = data().deepCopy(fields()[0].schema(), other.category);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.total_quantity)) {
        this.total_quantity = data().deepCopy(fields()[1].schema(), other.total_quantity);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.total_revenue)) {
        this.total_revenue = data().deepCopy(fields()[2].schema(), other.total_revenue);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.window_start)) {
        this.window_start = data().deepCopy(fields()[3].schema(), other.window_start);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.window_end)) {
        this.window_end = data().deepCopy(fields()[4].schema(), other.window_end);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'category' field.
      * @return The value.
      */
    public java.lang.CharSequence getCategory() {
      return category;
    }


    /**
      * Sets the value of the 'category' field.
      * @param value The value of 'category'.
      * @return This builder.
      */
    public com.farmia.sales.SalesSummary.Builder setCategory(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.category = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'category' field has been set.
      * @return True if the 'category' field has been set, false otherwise.
      */
    public boolean hasCategory() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'category' field.
      * @return This builder.
      */
    public com.farmia.sales.SalesSummary.Builder clearCategory() {
      category = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'total_quantity' field.
      * @return The value.
      */
    public int getTotalQuantity() {
      return total_quantity;
    }


    /**
      * Sets the value of the 'total_quantity' field.
      * @param value The value of 'total_quantity'.
      * @return This builder.
      */
    public com.farmia.sales.SalesSummary.Builder setTotalQuantity(int value) {
      validate(fields()[1], value);
      this.total_quantity = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'total_quantity' field has been set.
      * @return True if the 'total_quantity' field has been set, false otherwise.
      */
    public boolean hasTotalQuantity() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'total_quantity' field.
      * @return This builder.
      */
    public com.farmia.sales.SalesSummary.Builder clearTotalQuantity() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'total_revenue' field.
      * @return The value.
      */
    public float getTotalRevenue() {
      return total_revenue;
    }


    /**
      * Sets the value of the 'total_revenue' field.
      * @param value The value of 'total_revenue'.
      * @return This builder.
      */
    public com.farmia.sales.SalesSummary.Builder setTotalRevenue(float value) {
      validate(fields()[2], value);
      this.total_revenue = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'total_revenue' field has been set.
      * @return True if the 'total_revenue' field has been set, false otherwise.
      */
    public boolean hasTotalRevenue() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'total_revenue' field.
      * @return This builder.
      */
    public com.farmia.sales.SalesSummary.Builder clearTotalRevenue() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'window_start' field.
      * @return The value.
      */
    public long getWindowStart() {
      return window_start;
    }


    /**
      * Sets the value of the 'window_start' field.
      * @param value The value of 'window_start'.
      * @return This builder.
      */
    public com.farmia.sales.SalesSummary.Builder setWindowStart(long value) {
      validate(fields()[3], value);
      this.window_start = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'window_start' field has been set.
      * @return True if the 'window_start' field has been set, false otherwise.
      */
    public boolean hasWindowStart() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'window_start' field.
      * @return This builder.
      */
    public com.farmia.sales.SalesSummary.Builder clearWindowStart() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'window_end' field.
      * @return The value.
      */
    public long getWindowEnd() {
      return window_end;
    }


    /**
      * Sets the value of the 'window_end' field.
      * @param value The value of 'window_end'.
      * @return This builder.
      */
    public com.farmia.sales.SalesSummary.Builder setWindowEnd(long value) {
      validate(fields()[4], value);
      this.window_end = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'window_end' field has been set.
      * @return True if the 'window_end' field has been set, false otherwise.
      */
    public boolean hasWindowEnd() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'window_end' field.
      * @return This builder.
      */
    public com.farmia.sales.SalesSummary.Builder clearWindowEnd() {
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public SalesSummary build() {
      try {
        SalesSummary record = new SalesSummary();
        record.category = fieldSetFlags()[0] ? this.category : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.total_quantity = fieldSetFlags()[1] ? this.total_quantity : (java.lang.Integer) defaultValue(fields()[1]);
        record.total_revenue = fieldSetFlags()[2] ? this.total_revenue : (java.lang.Float) defaultValue(fields()[2]);
        record.window_start = fieldSetFlags()[3] ? this.window_start : (java.lang.Long) defaultValue(fields()[3]);
        record.window_end = fieldSetFlags()[4] ? this.window_end : (java.lang.Long) defaultValue(fields()[4]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<SalesSummary>
    WRITER$ = (org.apache.avro.io.DatumWriter<SalesSummary>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<SalesSummary>
    READER$ = (org.apache.avro.io.DatumReader<SalesSummary>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.category);

    out.writeInt(this.total_quantity);

    out.writeFloat(this.total_revenue);

    out.writeLong(this.window_start);

    out.writeLong(this.window_end);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.category = in.readString(this.category instanceof Utf8 ? (Utf8)this.category : null);

      this.total_quantity = in.readInt();

      this.total_revenue = in.readFloat();

      this.window_start = in.readLong();

      this.window_end = in.readLong();

    } else {
      for (int i = 0; i < 5; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.category = in.readString(this.category instanceof Utf8 ? (Utf8)this.category : null);
          break;

        case 1:
          this.total_quantity = in.readInt();
          break;

        case 2:
          this.total_revenue = in.readFloat();
          break;

        case 3:
          this.window_start = in.readLong();
          break;

        case 4:
          this.window_end = in.readLong();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










